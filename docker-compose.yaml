version: '3.8'
services:
  mongodb:
    container_name: mongo
    image: mongo:7.0
    restart: always
    ports:
      - 27017:27017
    volumes:
      - ./docker-volumes/mongo-data:/data/db
    networks:
      - elastic
  postgres:
    container_name: postgres_container
    image: postgres
    restart: always
    environment:
      - POSTGRES_USER=freedome
      - POSTGRES_PASSWORD=api
      - POSTGRES_DB=freedome_reviews
    ports:
      - '5432:5432'
    volumes:
      - ./docker-volumes/postgres-data:/var/lib/postgresql
    networks:
      - elastic

  postgres_auth:
    container_name: postgres_auth_container
    image: postgres
    restart: always
    environment:
      - POSTGRES_USER=freedome
      - POSTGRES_PASSWORD=api
      - POSTGRES_DB=freedome_auth
    ports:
      - '5432:5432'
    volumes:
      - ./docker-volumes/postgres-data:/var/lib/postgresql
    networks:
      - elastic
  rabbitmq:
    container_name: rabbitmq_container
    image: rabbitmq:3.13-rc-management-alpine
    restart: always
    environment:
      - RABBITMQ_DEFAULT_USER=freedome
      - RABBITMQ_DEFAULT_PASS=freedomepass
    ports:
      # AMQP protocol port
      - '5672:5672'
      # Management UI
      - '15672:15672'
    networks:
      - elastic
  elasticsearch:
    container_name: elasticsearch_container
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.2
    restart: always
    environment:
      ES_JAVA_OPTS: -Xmx1g -Xms1g
      bootstrap.memory_lock: 'true'
      discovery.type: single-node
      network.host: 0.0.0.0
      transport.host: 127.0.0.1
      http.host: 0.0.0.0
      xpack.security.enabled: 'false'
      xpack.security.authc.api_key.enabled: 'true'
      xpack.monitoring.collection.enabled: 'true'
      xpack.security.enrollment.enabled: 'true'
    ports:
      - 9300:9300
      - 9200:9200
    volumes:
      - ./docker-volumes/elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - elastic
  kibana:
    container_name: kibana_container
    image: docker.elastic.co/kibana/kibana:8.13.2
    restart: always
    environment:
      - ELASTICSEARCH_HOSTS=["http://elasticsearch_container:9200"]
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=kibana
      - ELASTICSEARCH_SERVICEACCOUNT_TOKEN=AAEAAWVsYXN0aWMva2liYW5hL2pvYmJlci1raWJhbmE6N3BWZ0ItZWxSY21wMEJ0Y3ZKNTlHZw
      - XPACK_FLEET_AGENTS_ELASTICSEARCH_HOSTS=["http://elasticsearch_container:9200"]
    ports:
      - 5601:5601
    networks:
      - elastic
    volumes:
      - ./kibana.yml/:/usr/share/kibana/config/kibana.yml:ro
    depends_on:
      - elasticsearch
  notifications:
    build:
      context: .
      dockerfile: ./microservices/notifications/Dockerfile
      target: development
    volumes:
      - .:/usr/src/app
      - ./proto:/proto
    env_file:
      - ./microservices/notifications/.env
    networks:
      - elastic
    depends_on:
      - elasticsearch
      - rabbitmq
  gateway:
    build:
      context: .
      dockerfile: ./microservices/gateway/Dockerfile
      target: development
    ports:
      - '3000:3000'
    volumes:
      - .:/usr/src/app
      - ./proto:/proto
    env_file:
      - ./microservices/gateway/.env
    networks:
      - elastic
    depends_on:
      - elasticsearch
  auth:
    build:
      context: .
      dockerfile: ./microservices/auth/Dockerfile
      target: development
    volumes:
      - .:/usr/src/app
      - ./proto:/proto
    env_file:
      - ./microservices/auth/.env
    networks:
      - elastic
    depends_on:
      - elasticsearch
  user:
    build:
      context: .
      dockerfile: ./microservices/user/Dockerfile
      target: development
    volumes:
      - .:/usr/src/app
      - ./proto:/proto
    env_file:
      - ./microservices/user/.env
    networks:
      - elastic
    depends_on:
      - elasticsearch
      - redis
      - mongodb
  gig:
    build:
      context: .
      dockerfile: ./microservices/gig/Dockerfile
      target: development
    volumes:
      - .:/usr/src/app
      - ./proto:/proto
    env_file:
      - ./microservices/gig/.env
    networks:
      - elastic
    depends_on:
      - elasticsearch
      - redis
      - mongodb
    expose:
      - '4000'
  redis:
    image: redis
    ports:
      - 6379:6379
    volumes:
      - ./docker-volumes/redis-data:/data
    networks:
      - elastic
  redis-commander:
    container_name: redis-commander
    hostname: redis-commander
    image: ghcr.io/joeferner/redis-commander:latest
    restart: always
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - '8081:8081'
    networks:
      - elastic
networks:
  elastic:
    name: elastic
