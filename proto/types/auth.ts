// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.176.0
//   protoc               v3.6.1
// source: proto/auth.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Timestamp } from "google/protobuf/timestamp";
import { Observable } from "rxjs";

export const protobufPackage = "auth";

export interface GetUserByIdRequest {
  id: number;
}

export interface CreateUserResponse {
  user: Auth | undefined;
  accessToken: string;
  refreshToken: string;
}

export interface CreateAuthDto {
  /** The username of the user. */
  username: string;
  /** The password of the user. */
  password: string;
  /** The country of the user. */
  country: string;
  /** The email of the user. */
  email: string;
  /** The optional profile picture of the user. */
  profilePicture: string;
  /** The optional name of the browser used by the user. */
  browserName: string;
  /** The optional type of device used by the user. */
  deviceType: string;
}

export interface Auth {
  /** The unique identifier for the user. */
  id: number;
  /** The username of the user. */
  username: string;
  /** The password of the user. */
  password: string;
  /** The public profile ID of the user, which is optional. */
  profilePublicId: string;
  /** The email of the user. */
  email: string;
  /** The country of the user. */
  country: string;
  /** The email verification token for the user, which is optional. */
  emailVerificationToken: string;
  /** Indicates whether the user's email is verified. */
  emailVerified: boolean;
  /** The name of the browser used by the user. */
  browserName: string;
  /** The type of device used by the user. */
  deviceType: string;
  /** The one-time password (OTP) for the user, which is optional. */
  otp: string;
  /** The expiration date and time for the OTP, which is optional. */
  otpExpiration:
    | Timestamp
    | undefined;
  /** The date and time when the user was created. */
  createdAt:
    | Timestamp
    | undefined;
  /** The token for resetting the user's password, which is optional. */
  passwordResetToken: string;
  /** The expiration date and time for the password reset token, which is optional. */
  passwordResetExpires:
    | Timestamp
    | undefined;
  /** The date and time when the user was updated. */
  updatedAt: Timestamp | undefined;
}

export interface LoginAuthRequest {
  /** The email of the user. */
  email: string;
  /** The password of the user. */
  password: string;
  /** The optional name of the browser used by the user. */
  browserName: string;
  /** The optional type of device used by the user. */
  deviceType: string;
}

export interface LoginAuthResponse {
  accessToken: string;
  refreshToken: string;
}

/** The request message containing the access token payload. */
export interface AccessTokenPayload {
  id: number;
  email: string;
  username: string;
}

/** The response message containing the token details. */
export interface TokenResponse {
  accessToken: string;
  refreshToken: string;
}

/** The request message containing the token string to decode. */
export interface DecodeTokenRequest {
  token: string;
}

/** The response message containing the decoded token data. */
export interface TokenDataResponse {
  id: number;
  email: string;
  username: string;
  iat: number;
  exp: number;
}

export interface CreateTokenRequest {
  id: number;
  email: string;
  username: string;
}

export const AUTH_PACKAGE_NAME = "auth";

export interface AuthServiceClient {
  createUser(request: CreateAuthDto): Observable<CreateUserResponse>;

  getUserByCredential(request: LoginAuthRequest): Observable<Auth>;

  createToken(request: CreateTokenRequest): Observable<TokenResponse>;

  decodeToken(request: DecodeTokenRequest): Observable<TokenDataResponse>;

  getUserById(request: GetUserByIdRequest): Observable<Auth>;
}

export interface AuthServiceController {
  createUser(request: CreateAuthDto): Promise<CreateUserResponse> | Observable<CreateUserResponse> | CreateUserResponse;

  getUserByCredential(request: LoginAuthRequest): Promise<Auth> | Observable<Auth> | Auth;

  createToken(request: CreateTokenRequest): Promise<TokenResponse> | Observable<TokenResponse> | TokenResponse;

  decodeToken(
    request: DecodeTokenRequest,
  ): Promise<TokenDataResponse> | Observable<TokenDataResponse> | TokenDataResponse;

  getUserById(request: GetUserByIdRequest): Promise<Auth> | Observable<Auth> | Auth;
}

export function AuthServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createUser", "getUserByCredential", "createToken", "decodeToken", "getUserById"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const AUTH_SERVICE_NAME = "AuthService";
