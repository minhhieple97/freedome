// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.176.0
//   protoc               v3.6.1
// source: proto/user.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices';
import { Observable } from 'rxjs';
import { Timestamp } from '../../google/protobuf/timestamp';

export const protobufPackage = 'user';

export interface GetUserBuyerWithEmailRequest {
  email: string;
}

export interface GetUserBuyerWithUsernameRequest {
  username: string;
}

export interface GetUserSellerByIdRequest {
  id: string;
}

export interface BuyerData {
  id: string;
  username: string;
  email: string;
  profilePublicId: string;
  country: string;
  isSeller: boolean;
  purchasedGigs: string[];
  createdAt: Timestamp | undefined;
  updatedAt: Timestamp | undefined;
}

export interface CreateSellerRequest {
  profilePublicId: string;
  fullName: string;
  email: string;
  profilePicture: string;
  description: string;
  oneliner: string;
  country: string;
  skills: string[];
  languages: Language[];
  responseTime: number;
  experience: Experience[];
  education: Education[];
  socialLinks: string[];
  certificates: Certificate[];
  username: string;
}

export interface Language {
  language: string;
  level: string;
}

export interface Experience {
  company: string;
  title: string;
  startDate: string;
  endDate: string;
  description: string;
  currentlyWorkingHere: boolean;
}

export interface Education {
  country: string;
  university: string;
  title: string;
  major: string;
  year: string;
}

export interface Certificate {
  name: string;
  from: string;
  year: number;
}

export interface RatingCategory {
  value: number;
  count: number;
}

export interface RatingCategories {
  five: RatingCategory | undefined;
  four: RatingCategory | undefined;
  three: RatingCategory | undefined;
  two: RatingCategory | undefined;
  one: RatingCategory | undefined;
}

export interface CreateSellerResponse {
  Id: string;
  profilePublicId: string;
  fullName: string;
  username: string;
  email: string;
  description: string;
  country: string;
  oneliner: string;
  skills: string[];
  ratingsCount: number;
  ratingSum: number;
  ratingCategories: RatingCategories | undefined;
  languages: Language[];
  responseTime: number;
  recentDelivery: Timestamp | undefined;
  experience: Experience[];
  education: Education[];
  socialLinks: string[];
  certificates: Certificate[];
  ongoingJobs: number;
  completedJobs: number;
  cancelledJobs: number;
  totalEarnings: number;
  totalGigs: number;
  createdAt: Timestamp | undefined;
  updatedAt: Timestamp | undefined;
}

export const USER_PACKAGE_NAME = 'user';

export interface UserServiceClient {
  getUserBuyerWithEmail(
    request: GetUserBuyerWithEmailRequest,
  ): Observable<BuyerData>;

  getUserBuyerWithUsername(
    request: GetUserBuyerWithUsernameRequest,
  ): Observable<BuyerData>;

  createSeller(request: CreateSellerRequest): Observable<CreateSellerResponse>;

  updateSeller(request: CreateSellerRequest): Observable<CreateSellerResponse>;

  getSellerById(
    request: GetUserSellerByIdRequest,
  ): Observable<CreateSellerResponse>;
}

export interface UserServiceController {
  getUserBuyerWithEmail(
    request: GetUserBuyerWithEmailRequest,
  ): Promise<BuyerData> | Observable<BuyerData> | BuyerData;

  getUserBuyerWithUsername(
    request: GetUserBuyerWithUsernameRequest,
  ): Promise<BuyerData> | Observable<BuyerData> | BuyerData;

  createSeller(
    request: CreateSellerRequest,
  ):
    | Promise<CreateSellerResponse>
    | Observable<CreateSellerResponse>
    | CreateSellerResponse;

  updateSeller(
    request: CreateSellerRequest,
  ):
    | Promise<CreateSellerResponse>
    | Observable<CreateSellerResponse>
    | CreateSellerResponse;

  getSellerById(
    request: GetUserSellerByIdRequest,
  ):
    | Promise<CreateSellerResponse>
    | Observable<CreateSellerResponse>
    | CreateSellerResponse;
}

export function UserServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      'getUserBuyerWithEmail',
      'getUserBuyerWithUsername',
      'createSeller',
      'updateSeller',
      'getSellerById',
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcMethod('UserService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcStreamMethod('UserService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
  };
}

export const USER_SERVICE_NAME = 'UserService';
