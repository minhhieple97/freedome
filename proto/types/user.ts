// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.176.0
//   protoc               v3.6.1
// source: proto/user.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices';
import { Observable } from 'rxjs';
import { Timestamp } from '../../google/protobuf/timestamp';

export const protobufPackage = 'user';

export interface GetUserBuyerWithEmailRequest {
  email: string;
}

export interface GetUserBuyerWithUsernameRequest {
  username: string;
}

export interface BuyerData {
  id: string;
  username: string;
  email: string;
  profilePublicId: string;
  country: string;
  isSeller: boolean;
  purchasedGigs: string[];
  createdAt: Timestamp | undefined;
  updatedAt: Timestamp | undefined;
}

export const USER_PACKAGE_NAME = 'user';

export interface UserServiceClient {
  getUserBuyerWithEmail(
    request: GetUserBuyerWithEmailRequest,
  ): Observable<BuyerData>;

  getUserBuyerWithUsername(
    request: GetUserBuyerWithUsernameRequest,
  ): Observable<BuyerData>;
}

export interface UserServiceController {
  getUserBuyerWithEmail(
    request: GetUserBuyerWithEmailRequest,
  ): Promise<BuyerData> | Observable<BuyerData> | BuyerData;

  getUserBuyerWithUsername(
    request: GetUserBuyerWithUsernameRequest,
  ): Promise<BuyerData> | Observable<BuyerData> | BuyerData;
}

export function UserServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      'getUserBuyerWithEmail',
      'getUserBuyerWithUsername',
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcMethod('UserService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcStreamMethod('UserService', method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
  };
}

export const USER_SERVICE_NAME = 'UserService';
